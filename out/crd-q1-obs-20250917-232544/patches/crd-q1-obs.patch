From 0a64d5d4585844e1ddcb903b2d1f15d285020562 Mon Sep 17 00:00:00 2001
From: Gustavo Schneiter <gmhschn@gmail.com>
Date: Wed, 17 Sep 2025 23:23:12 -0300
Subject: [PATCH] feat(obs): OTel 0.29 metrics (swap_latency_ms,
 invariant_error_rel) + tracing com git_commit_sha [local-only] (CE-OBS)

---
 Cargo.toml          |   8 +++
 src/bin/obs_demo.rs |  25 ++++++++++
 src/telemetry.rs    | 119 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 152 insertions(+)
 create mode 100644 src/bin/obs_demo.rs
 create mode 100644 src/telemetry.rs

diff --git a/Cargo.toml b/Cargo.toml
index 4808c4a..3c13d69 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -4,10 +4,18 @@ version = "0.1.0"
 edition = "2021"
 
 [dependencies]
+anyhow = "1"
 num-bigint = "0.4"
 num-integer = "0.1"
 num-rational = "0.4"
 num-traits = "0.2"
+opentelemetry = { version = "0.29", features = ["trace", "metrics"] }
+opentelemetry-otlp = { version = "0.29", features = ["http-proto"] }
+opentelemetry_sdk = { version = "0.29", features = ["metrics", "rt-tokio"] }
+tokio = { version = "1", features = ["rt-multi-thread", "macros"] }
+tracing = "0.1"
+tracing-opentelemetry = "0.30"
+tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt"] }
 uint = "0.9"
 
 [dev-dependencies]
diff --git a/src/bin/obs_demo.rs b/src/bin/obs_demo.rs
new file mode 100644
index 0000000..ef8e11b
--- /dev/null
+++ b/src/bin/obs_demo.rs
@@ -0,0 +1,25 @@
+use anyhow::Result;
+use opentelemetry::KeyValue;
+use std::time::Instant;
+
+use credit_engine_core::telemetry; // troque para ce_core se o crate tiver esse nome
+
+#[tokio::main]
+async fn main() -> Result<()> {
+    let tel = telemetry::init("credit-engine-core")?;
+
+    for i in 0..5u32 {
+        let span = telemetry::make_info_span("swap", i, "obs_demo");
+        let _guard = span.enter();
+
+        let t0 = Instant::now();
+        tokio::time::sleep(std::time::Duration::from_millis(50)).await;
+        let elapsed_ms = t0.elapsed().as_secs_f64() * 1000.0;
+
+        tel.swap_latency_ms.record(elapsed_ms, &[KeyValue::new("op", "swap")]);
+        tel.invariant_error_rel.record(0.001_f64, &[KeyValue::new("op", "swap")]);
+    }
+
+    tel.shutdown();
+    Ok(())
+}
diff --git a/src/telemetry.rs b/src/telemetry.rs
new file mode 100644
index 0000000..e481427
--- /dev/null
+++ b/src/telemetry.rs
@@ -0,0 +1,119 @@
+use anyhow::Result;
+use std::time::Duration;
+
+use opentelemetry::{
+    global,
+    metrics::{Histogram, Meter, MeterProvider},
+    trace::TracerProvider as _,
+    KeyValue,
+};
+use opentelemetry_otlp::{MetricExporter, SpanExporter, WithExportConfig};
+use opentelemetry_sdk::{
+    metrics::{PeriodicReader, SdkMeterProvider},
+    resource::Resource,
+    trace::SdkTracerProvider,
+};
+use tracing_subscriber::{layer::SubscriberExt, EnvFilter, Registry};
+use tracing::Level;
+
+pub struct Telemetry {
+    pub tracer_provider: SdkTracerProvider,
+    pub meter_provider: SdkMeterProvider,
+    pub meter: Meter,
+    pub swap_latency_ms: Histogram<f64>,
+    pub invariant_error_rel: Histogram<f64>,
+}
+
+impl Telemetry {
+    pub fn shutdown(&self) {
+        let _ = self.meter_provider.force_flush();
+        let _ = self.tracer_provider.shutdown();
+    }
+}
+
+pub fn init(service_name: &str) -> Result<Telemetry> {
+    let endpoint = std::env::var("OTEL_EXPORTER_OTLP_ENDPOINT")
+        .unwrap_or_else(|_| "http://localhost:4318".to_string());
+
+    let commit = std::env::var("CE_COMMIT_SHA").unwrap_or_else(|_| "unknown".into());
+
+    let resource = Resource::builder()
+        .with_attributes([
+            KeyValue::new("service.name", service_name.to_string()),
+            KeyValue::new("service.version", env!("CARGO_PKG_VERSION")),
+            KeyValue::new("git.commit.sha", commit),
+        ])
+        .build();
+
+    // ---- Traces (OTLP/HTTP) ----
+    let span_exporter = SpanExporter::builder()
+        .with_http()
+        .with_endpoint(&endpoint)
+        .build()?;
+
+    let tracer_provider = SdkTracerProvider::builder()
+        .with_resource(resource.clone())
+        .with_batch_exporter(span_exporter)
+        .build();
+
+    let tracer = tracer_provider.tracer("ce_core");
+
+    // ---- Métricas (OTLP/HTTP) ----
+    let metric_exporter = MetricExporter::builder()
+        .with_http()
+        .with_endpoint(&endpoint)
+        .build()?;
+
+    let reader = PeriodicReader::builder(metric_exporter)
+        .with_interval(Duration::from_secs(10))
+        .build();
+
+    let meter_provider = SdkMeterProvider::builder()
+        .with_resource(resource)
+        .with_reader(reader)
+        .build();
+
+    // Globais
+    global::set_tracer_provider(tracer_provider.clone());
+    global::set_meter_provider(meter_provider.clone());
+
+    // tracing -> OTel
+    let otel_layer = tracing_opentelemetry::layer().with_tracer(tracer);
+    let fmt_layer = tracing_subscriber::fmt::layer().with_target(false);
+    let subscriber = Registry::default()
+        .with(EnvFilter::try_from_default_env().unwrap_or_else(|_| EnvFilter::new("info")))
+        .with(fmt_layer)
+        .with(otel_layer);
+    let _ = tracing::subscriber::set_global_default(subscriber);
+
+    // Instrumentos (histogramas)
+    let meter = meter_provider.meter("ce_core");
+    let swap_latency_ms = meter
+        .f64_histogram("swap_latency_ms")
+        .with_unit("ms")
+        .with_description("Latency of swap operations in ms")
+        .build();
+    let invariant_error_rel = meter
+        .f64_histogram("invariant_error_rel")
+        .with_unit("1")
+        .with_description("Relative invariant error |Δk/k| per operation")
+        .build();
+
+    Ok(Telemetry { tracer_provider, meter_provider, meter, swap_latency_ms, invariant_error_rel })
+}
+
+/// Cria um `Span` INFO com nome **estático** (exigência do tracing) e
+/// coloca o nome dinâmico em `span_name`. Inclui `git_commit_sha`.
+pub fn make_info_span(name: &str, op_id: u32, component: &str) -> tracing::Span {
+    let commit = std::env::var("CE_COMMIT_SHA").unwrap_or_else(|_| "unknown".into());
+    tracing::span!(
+        target: "ce_core",
+        Level::INFO,
+        "op",
+        git_commit_sha = %commit,
+        span_name = %name,
+        op_id = op_id,
+        component = component
+    )
+}
+
-- 
2.50.1

